#!/bin/sh

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This scripts performs update of stateful partition directories useful for
# dev_mode.

. /usr/lib/shflags

# Constants for states.
CLEAN_STATE="clean"
OLD_STATE="old"

DEFINE_string stateful_change "${OLD_STATE}" \
  "The state of the new stateful partition - used in update testing."

FLAGS "$@" || exit 1

# Die on error.
set -e

remove_quotes() {
  echo "$1" | sed -e "s/^'//; s/'$//"
}

update_dev_image () {
  LSB_RELEASE="/etc/lsb-release"
  STATEFUL_DIR="/mnt/stateful_partition"
  STATEFUL_IMAGE="$STATEFUL_DIR/stateful.image"
  STATEFUL_MOUNT_POINT="/tmp/s"

  if [ -n "${FLAGS_ARGV}" ]; then
    BASE_UPDATE_URL=$(remove_quotes "${FLAGS_ARGV}")
  else
    if [ -f "$STATEFUL_DIR$LSB_RELEASE" ]; then
      DEVSERVER_URL=$(grep CHROMEOS_DEVSERVER $STATEFUL_DIR$LSB_RELEASE | \
                    cut -f 2 -d '=')
    fi
    if [ -z "$DEVSERVER_URL" ]; then
      DEVSERVER_URL=$(grep CHROMEOS_DEVSERVER $LSB_RELEASE | cut -f 2 -d '=')
    fi
    # Sanity check.
    if [ -z "$DEVSERVER_URL" ]; then
      echo >&2 "No CHROMEOS_DEVSERVER URL found in lsb-release file"
      exit 1
    fi
    # Devserver URL should never contain "/update"
    DEVSERVER_URL=$(echo $DEVSERVER_URL | sed -e 's#/update##')
    BASE_UPDATE_URL="$DEVSERVER_URL/static"
  fi

  STATEFUL_UPDATE_URL="$BASE_UPDATE_URL/stateful.image.gz"

  # Prepare directories for update.
  rm -rf "$STATEFUL_DIR/var_new" "$STATEFUL_DIR/dev_image_new"

  # Prepare and mount new stateful partition.
  rm -rf "$STATEFUL_MOUNT_POINT"
  mkdir -p "$STATEFUL_MOUNT_POINT"

  echo "Download stateful partition image from $STATEFUL_UPDATE_URL"
  # Unzip mount and copy the relevant directories.
  # Get the update.
  eval "wget -qS -T 300 -O - \"$STATEFUL_UPDATE_URL\"" | \
      gzip -d > $STATEFUL_IMAGE
  echo >&2 "Successfully downloaded update"
  trap "rm -f \"$STATEFUL_IMAGE\"" EXIT
  mount -n -o loop "$STATEFUL_IMAGE" "$STATEFUL_MOUNT_POINT"
  if [ -d "$STATEFUL_MOUNT_POINT/var" ] && \
      [ -d "$STATEFUL_MOUNT_POINT/dev_image" ] ; then
    echo >&2 "Copying new /var from stateful update"
    cp -rf "$STATEFUL_MOUNT_POINT/var" "$STATEFUL_DIR/var_new"
    echo >&2 "Copying new /usr/local from stateful update"
    cp -rf "$STATEFUL_MOUNT_POINT/dev_image" "$STATEFUL_DIR/dev_image_new"
    echo >&2 "Notifying startup that an update is available"
    touch "$STATEFUL_DIR/.update_available"
  else
    echo >&2 "No update available"
  fi

  umount -n -d "$STATEFUL_MOUNT_POINT"

  rm -f "$STATEFUL_IMAGE"

  trap - EXIT
}

update_old_state () {
  echo >&2 "Not updating state except for dev_image."
}

update_clean_state () {
  echo >&2 "Restoring state to factory_install with dev_image."
  echo "fast test" > "/mnt/stateful_partition/factory_install_reset"
}

main () {
  update_dev_image
  if [ "${FLAGS_stateful_change}" = "${OLD_STATE}" ]; then
    update_old_state
  elif [ "${FLAGS_stateful_change}" = "${CLEAN_STATE}" ]; then
    update_clean_state
  else
    echo >&2 "Invalid state given to stateful update.  Aborting..."
    exit 1
  fi
}

main $@
